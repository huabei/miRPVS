# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna
  - override /hydra/launcher: ray
  - override /hydra/sweeper/sampler: random

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/pearson_best"

extras:
  ignore_warnings: True
  print_config: False

logger:
  wandb:
    offline: true

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 2

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    # n_trials: 10

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.RandomSampler
      seed: 1234

    # define hyperparameter search space
    # params:
    #   model.optimizer.lr: tag(log, interval(0.00001, 0.001))
    # model.net.hidden_nf: choice(64, 128)
  launcher:
    ray:
      init:
        include_dashboard: False
        num_cpus: 40
      remote:
        num_cpus: 10
        num_gpus: 1
